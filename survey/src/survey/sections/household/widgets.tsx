// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as odSurveyHelpers from 'evolution-common/lib/services/odSurvey/helpers';
import * as choices from '../../common/choices';
import * as conditionals from '../../common/conditionals';
import * as customConditionals from '../../common/customConditionals';
import * as customWidgets from './customWidgets';
import * as customChoices from './customChoices';
import * as customValidations from '../../common/customValidations';

export const householdMembers = customWidgets.householdMembers;

export const personAge: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputNumberBase,
    path: 'age',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:age', {
            count: countPersons
        });
    },
    conditional: defaultConditional,
    validations: validations.ageValidation
};

export const personNickname: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'nickname',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:nickname'),
    conditional: customConditionals.hasPersonCount2OrMoreCustomConditional,
    validations: validations.requiredValidation
};

export const personHasDisability: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'hasDisability',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:hasDisability', {
            count: countPersons
        });
    },
    choices: choices.yesNoPreferNotToAnswer,
    conditional: conditionals.hasOnePersonWithDisabilityOrHhSize1Conditional,
    validations: validations.requiredValidation
};

export const personSexAssignedAtBirth: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'sexAssignedAtBirth',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:sexAssignedAtBirth'),
    choices: choices.maleFemalePreferNotAnswer,
    conditional: conditionals.ifAge5orMoreConditional,
    validations: validations.requiredValidation
};

export const personGender: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'gender',
    twoColumns: false,
    containsHtml: true,
    customPath: 'genderCustom',
    customChoice: 'custom',
    label: (t: TFunction) => t('household:gender'),
    choices: choices.maleFemaleCustomPreferNotToAnswer,
    conditional: conditionals.hasPreferNotToAnswerToSexAssignedConditional,
    validations: validations.requiredValidation
};

export const personWorkerType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'workerType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        return t('household:workerType', {
            context: activePerson?.gender
        });
    },
    choices: choices.participationStatusWorker,
    conditional: conditionals.ifAge14orMoreConditional,
    validations: validations.requiredValidation
};

export const personStudentType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'studentType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        return t('household:studentType', {
            context: activePerson?.gender
        });
    },
    choices: choices.participationStatusStudent,
    conditional: conditionals.ifAge16OrMoreConditional,
    validations: validations.requiredValidation
};

export const personSchoolType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'schoolType',
    twoColumns: false,
    containsHtml: true,
    customPath: 'schoolTypeOther',
    customChoice: 'other',
    label: (t: TFunction) => t('household:schoolType'),
    choices: choices.schoolType,
    conditional: conditionals.ifAge15OrLessConditional,
    validations: validations.requiredValidation
};

export const personOccupation: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'occupation',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:occupation'),
    choices: choices.personOccupation,
    conditional: customConditionals.personOccupationCustomConditional,
    validations: validations.requiredValidation
};

export const personWorkerTypeBeforeLeave: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'workerTypeBeforeLeave',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:workerTypeBeforeLeave', {
            nickname,
            count: countPersons
        });
    },
    choices: choices.participationStatusWorker,
    conditional: conditionals.parentalOrSickLeaveConditional,
    validations: validations.requiredValidation
};

export const personEducationalAttainment: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'educationalAttainment',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:educationalAttainment'),
    choices: choices.educationalAttainment,
    conditional: conditionals.ifAge15OrMoreConditional,
    validations: validations.requiredValidation
};

export const personDrivingLicenseOwnership: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'drivingLicenseOwnership',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        return t('household:drivingLicenseOwnership', {
            context: activePerson?.gender
        });
    },
    choices: choices.yesNoDontKnow,
    conditional: conditionals.ifAge16OrMoreConditional,
    validations: validations.requiredValidation
};

export const personCarSharingMember: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'carSharingMember',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:carSharingMember'),
    choices: choices.yesNoDontKnow,
    conditional: conditionals.hasDrivingLicenseConditional,
    validations: validations.requiredValidation
};

export const personTransitFares: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'transitFares',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:transitFares', {
            nickname,
            count: countPersons
        });
    },
    choices: choices.transitFareType,
    conditional: conditionals.ifAge6OrMoreConditional,
    validations: customValidations.transitFareCustomValidation
};

export const personWorkPlaceType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'workPlaceType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:workPlaceType', {
            nickname,
            count: countPersons
        });
    },
    choices: choices.workPlaceTypeChoices,
    conditional: conditionals.isWorkerConditional,
    validations: validations.requiredValidation
};

export const personWorkPlaceTypeBeforeLeave: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'workPlaceTypeBeforeLeave',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:workPlaceTypeBeforeLeave', {
            nickname,
            count: countPersons
        });
    },
    choices: customChoices.workPlaceBeforeLeaveTypeCustomChoices,
    conditional: conditionals.wasWorkerBeforeLeaveConditional,
    validations: validations.requiredValidation
};

export const personSchoolPlaceType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'schoolPlaceType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:schoolPlaceType', {
            nickname,
            count: countPersons
        });
    },
    choices: choices.schoolPlaceTypeChoices,
    conditional: conditionals.isStudentConditional,
    validations: validations.requiredValidation
};

export const personUsualWorkPlaceName: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'usualWorkPlace.name',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:usualWorkPlace.name', {
            nickname,
            count: countPersons
        });
    },
    conditional: conditionals.hasWorkingLocationConditional,
    validations: validations.requiredValidation
};

export const personUsualWorkPlaceGeography = customWidgets.personUsualWorkPlaceGeography;

export const personUsualSchoolPlaceName: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'usualSchoolPlace.name',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:usualSchoolPlace.name', {
            nickname,
            count: countPersons
        });
    },
    conditional: customConditionals.personUsualSchoolPlaceNameCustomConditional,
    validations: validations.requiredValidation
};

export const personUsualSchoolPlaceGeography = customWidgets.personUsualSchoolPlaceGeography;

export const personTravelToWorkDays: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'travelToWorkDays',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:travelToWorkDays', {
            nickname,
            context: activePerson?.gender,
            count: countPersons
        });
    },
    choices: customChoices.lastWeekTravelToWorkDaysCustomChoices,
    conditional: conditionals.isWorkerConditional,
    validations: customValidations.travelToPlaceCustomValidation
};

export const personRemoteWorkDays: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'remoteWorkDays',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:remoteWorkDays', {
            nickname,
            context: activePerson?.gender,
            count: countPersons
        });
    },
    choices: customChoices.lastWeekRemoteWorkDaysCustomChoices,
    conditional: conditionals.personRemoteWorkDaysConditional,
    validations: customValidations.remoteWorkDaysCustomValidation
};

export const household_save: WidgetConfig.ButtonWidgetConfig = {
    ...defaultInputBase.buttonNextBase,
    path: 'household.save',
    label: (t: TFunction) => t('household:household.save')
};
