// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as odSurveyHelpers from 'evolution-common/lib/services/odSurvey/helpers';
import * as choices from '../../common/choices';
import * as conditionals from '../../common/conditionals';
// import * as inputRange from '../../common/inputRange';
import * as customConditionals from '../../common/customConditionals';
import * as customWidgets from './customWidgets';
// import * as customHelpPopup from '../../common/customHelpPopup';
// import * as customValidations from '../../common/customValidations';

export const householdMembers = customWidgets.householdMembers;

export const personNickname: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'nickname',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:nickname'),
    conditional: conditionals.hasHouseholdSize2OrMoreConditional,
    validations: validations.requiredValidation
};

export const personAge: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputNumberBase,
    path: 'age',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('household:age', {
            count: countPersons
        });
    },
    conditional: defaultConditional,
    validations: validations.ageValidation
};

export const personGender: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'gender',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:gender'),
    choices: choices.gender,
    conditional: conditionals.ifAge5orMoreConditional,
    validations: validations.requiredValidation
};

export const personWorkerType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'workerType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const personGender = activePerson?.gender;
        return t('household:workerType', {
            context: personGender === 'male' || personGender === 'female' ? personGender : 'other'
        });
    },
    choices: choices.participationStatus,
    conditional: conditionals.ifAge14orMoreConditional,
    validations: validations.requiredValidation
};

export const personStudentType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'studentType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const personGender = activePerson?.gender;
        return t('household:studentType', {
            context: personGender === 'male' || personGender === 'female' ? personGender : 'other'
        });
    },
    choices: choices.participationStatus,
    conditional: conditionals.ifAge16OrMoreConditional,
    validations: validations.requiredValidation
};

export const personSchoolType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'schoolType',
    twoColumns: false,
    containsHtml: true,
    customPath: 'schoolTypeOther',
    customChoice: 'other',
    label: (t: TFunction) => t('household:schoolType'),
    choices: choices.schoolType,
    conditional: conditionals.ifAge15OrLessConditional,
    validations: validations.requiredValidation
};

export const personOccupation: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'occupation',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:occupation'),
    choices: choices.personOccupation,
    conditional: customConditionals.personOccupationCustomConditional,
    validations: validations.requiredValidation
};

export const personDrivingLicenseOwner: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'drivingLicenseOwner',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const personGender = activePerson?.gender;
        return t('household:drivingLicenseOwner', {
            context: personGender === 'male' || personGender === 'female' ? personGender : 'other'
        });
    },
    choices: choices.yesNoDontKnow,
    conditional: conditionals.ifAge16OrMoreConditional,
    validations: validations.requiredValidation
};

export const personCarSharingMember: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'carSharingMember',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:carSharingMember'),
    choices: choices.yesNoDontKnow,
    conditional: conditionals.hasDrivingLicenseConditional,
    validations: validations.requiredValidation
};

export const personTransitFares: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'transitFares',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        return t('household:transitFares', {
            nickname
        });
    },
    choices: choices.transitFareType,
    conditional: conditionals.ifAge6OrMoreConditional,
    validations: validations.requiredValidation
};

export const personHasDisability: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'hasDisability',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('household:hasDisability'),
    choices: choices.yesNoPreferNotAnswer,
    conditional: conditionals.hasOnePersonWithDisabilityOrHhSize1Conditional,
    validations: validations.requiredValidation
};

export const personWorkLocationType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'workLocationType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        return t('household:workLocationType', {
            nickname
        });
    },
    choices: choices.workLocationType,
    conditional: conditionals.isWorkerConditional,
    validations: validations.requiredValidation
};

export const personSchoolLocationType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'schoolLocationType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        return t('household:schoolLocationType', {
            nickname
        });
    },
    choices: choices.studyLocationType,
    conditional: conditionals.isStudentConditional,
    validations: validations.requiredValidation
};

export const personUsualWorkPlaceName: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'usualWorkPlace.name',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        return t('household:usualWorkPlace.name', {
            nickname
        });
    },
    conditional: conditionals.hasWorkingLocationConditional,
    validations: validations.requiredValidation
};

export const personUsualWorkPlaceGeography = customWidgets.personUsualWorkPlaceGeography;

export const personUsualSchoolPlaceName: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'usualSchoolPlace.name',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        return t('household:usualSchoolPlace.name', {
            nickname
        });
    },
    conditional: customConditionals.personUsualSchoolPlaceNameCustomConditional,
    validations: validations.requiredValidation
};

export const personUsualSchoolPlaceGeography = customWidgets.personUsualSchoolPlaceGeography;

export const personTravelToWorkDays: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'travelToWorkDays',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const personGender = activePerson?.gender;
        return t('household:travelToWorkDays', {
            nickname,
            context: personGender === 'male' || personGender === 'female' ? personGender : 'other'
        });
    },
    choices: choices.yesNoDontKnow,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const personRemoteWorkDays: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'remoteWorkDays',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        return t('household:remoteWorkDays', {
            nickname
        });
    },
    choices: choices.yesNoDontKnow,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const personTravelToStudyDays: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'travelToStudyDays',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const personGender = activePerson?.gender;
        return t('household:travelToStudyDays', {
            nickname,
            context: personGender === 'male' || personGender === 'female' ? personGender : 'other'
        });
    },
    choices: choices.yesNoDontKnow,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const personRemoteStudyDays: WidgetConfig.InputCheckboxType = {
    ...defaultInputBase.inputCheckboxBase,
    path: 'remoteStudyDays',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        return t('household:remoteStudyDays', {
            nickname
        });
    },
    choices: choices.yesNoDontKnow,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const household_save: WidgetConfig.ButtonWidgetConfig = {
    ...defaultInputBase.buttonNextBase,
    path: 'household.save',
    label: (t: TFunction) => t('household:household.save')
};
