// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as odSurveyHelpers from 'evolution-common/lib/services/odSurvey/helpers';
import * as choices from '../../common/choices';
import * as conditionals from '../../common/conditionals';
import * as customConditionals from '../../common/customConditionals';
import * as customWidgets from './customWidgets';

export const activePersonTitle = customWidgets.activePersonTitle;

export const buttonSwitchPerson = customWidgets.buttonSwitchPerson;

export const personNewPerson = customWidgets.personNewPerson;

export const personWhoWillAnswerForThisPerson = customWidgets.personWhoWillAnswerForThisPerson;

export const personDidTrips = customWidgets.personDidTrips;

export const personDidTripsConfirm = customWidgets.personDidTripsConfirm;

export const visitedPlacesIntro = customWidgets.visitedPlacesIntro;

export const personDeparturePlaceIsHome = customWidgets.personDeparturePlaceIsHome;

export const personDeparturePlaceOther: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'household.persons.{_activePersonId}.journeys.{_activeJourneyId}.departurePlaceOther',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('tripsIntro:household.persons.{_activePersonId}.journeys.{_activeJourneyId}.departurePlaceOther', {
            nickname,
            count: countPersons
        });
    },
    choices: choices.departurePlaceOtherChoices,
    conditional: customConditionals.departurePlaceOtherCustomConditional,
    validations: validations.requiredValidation
};

export const tripsIntro_save: WidgetConfig.ButtonWidgetConfig = {
    ...defaultInputBase.buttonNextBase,
    path: 'tripsIntro.save',
    label: (t: TFunction) => t('tripsIntro:tripsIntro.save')
};

export const tripsIntroOutro: WidgetConfig.TextWidgetConfig = {
    ...defaultInputBase.infoTextBase,
    path: 'tripsIntroOutro',
    containsHtml: true,
    text: (t: TFunction) => t('tripsIntro:tripsIntroOutro'),
    conditional: defaultConditional
};
