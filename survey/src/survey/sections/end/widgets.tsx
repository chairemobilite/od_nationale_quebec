// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as surveyHelper from 'evolution-common/lib/utils/helpers';
import * as choices from '../../common/choices';
import * as conditionals from '../../common/conditionals';
import * as inputRange from '../../common/inputRange';
import * as customValidations from '../../common/customValidations';

export const householdOwnership: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'household.ownership',
    twoColumns: false,
    containsHtml: false,
    label: (t: TFunction) => t('end:household.ownership'),
    choices: choices.householdOwnershipChoices,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const householdIncome: WidgetConfig.InputSelectType = {
    ...defaultInputBase.inputSelectBase,
    path: 'household.income',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:household.income'),
    choices: choices.householdIncomeChoices,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const wouldLikeToParticipateInOtherSurveysChaireMobilite: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'end.wouldLikeToParticipateInOtherSurveysChaireMobilite',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.wouldLikeToParticipateInOtherSurveysChaireMobilite'),
    choices: choices.yesNo,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const wouldLikeToParticipateInOtherSurveysChaireMobiliteContactEmail: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'end.wouldLikeToParticipateInOtherSurveysChaireMobiliteContactEmail',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.wouldLikeToParticipateInOtherSurveysChaireMobiliteContactEmail'),
    conditional: conditionals.wantToParticipateInOtherSurveysChaireMobiliteConditional,
    validations: validations.emailValidation
};

export const householdCommentsOnSurvey: WidgetConfig.InputTextType = {
    ...defaultInputBase.textBase,
    path: 'end.commentsOnSurvey',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.commentsOnSurvey'),
    conditional: defaultConditional,
    validations: validations.optionalValidation
};

export const optionalIntroText: WidgetConfig.TextWidgetConfig = {
    ...defaultInputBase.infoTextBase,
    path: 'end.optionalIntroText',
    containsHtml: true,
    text: (t: TFunction) => t('end:end.optionalIntroText'),
    conditional: defaultConditional
};

export const householdHybridCarNumber: WidgetConfig.InputRadioNumberType = {
    ...defaultInputBase.inputRadioNumberBase,
    path: 'household.hybridCarNumber',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:household.hybridCarNumber'),
    valueRange: {
        min: 0,
        max: (interview) => surveyHelper.getResponse(interview, 'household.carNumber', 0) as any
    },
    conditional: conditionals.householdHasCars,
    validations: customValidations.householdHybridCarCountCustomValidation
};

export const householdElectricCarNumber: WidgetConfig.InputRadioNumberType = {
    ...defaultInputBase.inputRadioNumberBase,
    path: 'household.electricCarNumber',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:household.electricCarNumber'),
    valueRange: {
        min: 0,
        max: (interview) => surveyHelper.getResponse(interview, 'household.carNumber', 0) as any
    },
    conditional: conditionals.householdHasCars,
    validations: customValidations.householdElectricCarCountCustomValidation
};

export const endInterestOfTheSurvey: WidgetConfig.InputRangeType = {
    ...defaultInputBase.inputRangeBase,
    ...inputRange.sliderNotAtAllToVeryInteresting,
    path: 'end.interestOfTheSurvey',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.interestOfTheSurvey'),
    conditional: defaultConditional,
    validations: customValidations.rangeOptionalOrValidCustomValidation
};

export const endTimeSpentAnswering: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputNumberBase,
    path: 'end.timeSpentAnswering',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.timeSpentAnswering'),
    conditional: defaultConditional,
    validations: validations.optionalValidation
};

export const endDurationOfTheSurvey: WidgetConfig.InputRangeType = {
    ...defaultInputBase.inputRangeBase,
    ...inputRange.sliderTooShortToTooLong,
    path: 'end.durationOfTheSurvey',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.durationOfTheSurvey'),
    conditional: defaultConditional,
    validations: customValidations.rangeOptionalOrValidCustomValidation
};

export const endDifficultyOfTheSurvey: WidgetConfig.InputRangeType = {
    ...defaultInputBase.inputRangeBase,
    ...inputRange.sliderVeryEasyToVeryDifficult,
    path: 'end.difficultyOfTheSurvey',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.difficultyOfTheSurvey'),
    conditional: defaultConditional,
    validations: customValidations.rangeOptionalOrValidCustomValidation
};

export const endBurdenOfTheSurvey: WidgetConfig.InputRangeType = {
    ...defaultInputBase.inputRangeBase,
    ...inputRange.sliderNotAtAllToVeryBurdensome,
    path: 'end.burdenOfTheSurvey',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.burdenOfTheSurvey'),
    conditional: defaultConditional,
    validations: customValidations.rangeOptionalOrValidCustomValidation
};

export const endConsideredAbandoningSurvey: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'end.consideredAbandoningSurvey',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('end:end.consideredAbandoningSurvey'),
    choices: choices.yesNoDontKnow,
    conditional: defaultConditional,
    validations: validations.optionalValidation
};

export const buttonCompleteInterviewWithCompleteSection: WidgetConfig.ButtonWidgetConfig = {
    ...defaultInputBase.buttonNextBase,
    path: 'buttonCompleteInterviewWithCompleteSection',
    label: (t: TFunction) => t('end:buttonCompleteInterviewWithCompleteSection')
};
