// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as choices from '../../common/choices';
import * as conditionals from '../../common/conditionals';
// import * as inputRange from '../../common/inputRange';
import * as customConditionals from '../../common/customConditionals';
import * as customWidgets from './customWidgets';
import * as customHelpPopup from '../../common/customHelpPopup';
// import * as customValidations from '../../common/customValidations';

export const accessCode: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'accessCode',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:accessCode'),
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const acceptToBeContactedForHelp: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'acceptToBeContactedForHelp',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:acceptToBeContactedForHelp'),
    choices: choices.yesNo,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const contactInformationIntro: WidgetConfig.TextWidgetConfig = {
    ...defaultInputBase.infoTextBase,
    path: 'contactInformationIntro',
    containsHtml: true,
    text: (t: TFunction) => `<p class="input-text">${t('home:contactInformationIntro')}</p>`,
    conditional: conditionals.acceptsToBeContactedForHelp
};

export const contactEmail: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'contactEmail',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:contactEmail'),
    conditional: conditionals.acceptsToBeContactedForHelp,
    validations: validations.emailValidation
};

export const phoneNumber: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'phoneNumber',
    twoColumns: false,
    containsHtml: true,
    joinWith: 'contactEmail',
    label: (t: TFunction) => t('home:phoneNumber'),
    conditional: conditionals.acceptsToBeContactedForHelp,
    validations: validations.phoneValidation
};

export const home_address: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'home.address',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:home.address'),
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const home_city: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'home.city',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:home.city'),
    helpPopup: customHelpPopup.cityHelpPopup,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const home_region: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'home.region',
    twoColumns: false,
    containsHtml: true,
    defaultValue: 'QuÃ©bec',
    label: (t: TFunction) => t('home:home.region'),
    conditional: customConditionals.hiddenWithQuebecAsDefaultValueCustomConditional,
    validations: validations.requiredValidation
};

export const home_country: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'home.country',
    twoColumns: false,
    containsHtml: true,
    defaultValue: 'Canada',
    label: (t: TFunction) => t('home:home.country'),
    conditional: customConditionals.hiddenWithCanadaAsDefaultValueCustomConditional,
    validations: validations.requiredValidation
};

export const home_postalCode: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'home.postalCode',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:home.postalCode'),
    conditional: defaultConditional,
    validations: validations.postalCodeValidation
};

export const home_geography = customWidgets.home_geography;

export const household_size: WidgetConfig.InputRadioNumberType = {
    ...defaultInputBase.inputRadioNumberBase,
    path: 'household.size',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:household.size'),
    valueRange: {
        min: 1,
        max: 6
    },
    overMaxAllowed: true,
    helpPopup: customHelpPopup.householdSizeHelpPopup,
    conditional: defaultConditional,
    validations: validations.householdSizeValidation
};

export const household_carNumber: WidgetConfig.InputRadioNumberType = {
    ...defaultInputBase.inputRadioNumberBase,
    path: 'household.carNumber',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:household.carNumber'),
    valueRange: {
        min: 0,
        max: 5
    },
    overMaxAllowed: true,
    helpPopup: customHelpPopup.householdCarNumberHelpPopup,
    conditional: defaultConditional,
    validations: validations.carNumberValidation
};

export const household_bicycleNumber: WidgetConfig.InputRadioNumberType = {
    ...defaultInputBase.inputRadioNumberBase,
    path: 'household.bicycleNumber',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:household.bicycleNumber'),
    valueRange: {
        min: 0,
        max: 5
    },
    overMaxAllowed: true,
    conditional: defaultConditional,
    validations: validations.bicycleNumberValidation
};

export const household_electricBicycleNumber: WidgetConfig.InputRadioNumberType = {
    ...defaultInputBase.inputRadioNumberBase,
    path: 'household.electricBicycleNumber',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:household.electricBicycleNumber'),
    valueRange: {
        min: 0,
        max: 5
    },
    overMaxAllowed: true,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const household_atLeastOnePersonWithDisability: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'household.atLeastOnePersonWithDisability',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('home:household.atLeastOnePersonWithDisability'),
    choices: choices.yesNoPreferNotAnswer,
    conditional: conditionals.hasHouseholdSize2OrMoreConditional,
    validations: validations.requiredValidation
};

export const home_save: WidgetConfig.ButtonWidgetConfig = {
    ...defaultInputBase.buttonNextBase,
    path: 'home.save',
    label: (t: TFunction) => t('home:home.save')
};
