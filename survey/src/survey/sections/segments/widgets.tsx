// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as odSurveyHelpers from 'evolution-common/lib/services/odSurvey/helpers';
import * as choices from '../../common/choices';
import * as customConditionals from '../../common/customConditionals';
import * as customWidgets from './customWidgets';
import * as customChoices from './customChoices';

export const activePersonTitle = customWidgets.activePersonTitle;

export const buttonSwitchPerson = customWidgets.buttonSwitchPerson;

export const segmentsPersonTripsTitle = customWidgets.segmentsPersonTripsTitle;

export const personVisitedPlacesMap = customWidgets.personVisitedPlacesMap;

export const personTrips = customWidgets.personTrips;

export const segmentIntro = customWidgets.segmentIntro;

export const segments = customWidgets.segments;

export const segmentSameModeAsReverseTrip = customWidgets.segmentSameModeAsReverseTrip;

export const segmentModePre = customWidgets.segmentModePre;

export const segmentMode = customWidgets.segmentMode;

export const segmentHowToBus = customWidgets.segmentHowToBus;

export const segmentPaidForParking: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'paidForParking',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('segments:paidForParking'),
    choices: choices.yesNoDontKnow,
    conditional: customConditionals.isCarDriverAndDestinationWorkCustomConditional,
    validations: validations.requiredValidation
};

export const segmentVehicleOccupancy: WidgetConfig.InputRadioNumberType = {
    ...defaultInputBase.inputRadioNumberBase,
    path: 'vehicleOccupancy',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('segments:vehicleOccupancy'),
    valueRange: {
        min: 1,
        max: 5
    },
    overMaxAllowed: true,
    conditional: customConditionals.isSelfDeclaredCarDriverCustomConditional,
    validations: validations.requiredValidation
};

export const segmentDriver = customWidgets.segmentDriver;

export const segmentBusLines = customWidgets.segmentBusLines;

export const segmentBusLinesWarning = customWidgets.segmentBusLinesWarning;

export const segmentOnDemandType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'onDemandType',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('segments:onDemandType'),
    choices: customChoices.onDemandCustomChoices,
    conditional: customConditionals.isTransitAndNotNationaleCustomConditional,
    validations: validations.requiredValidation
};

export const tripJunctionQueryString: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'tripJunctionQueryString',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('segments:tripJunctionQueryString'),
    conditional: customConditionals.shouldAskTripJunctionCustomConditional,
    validations: validations.optionalValidation
};

export const tripJunctionGeography = customWidgets.tripJunctionGeography;

export const segmentHasNextMode = customWidgets.segmentHasNextMode;

export const buttonSaveTrip = customWidgets.buttonSaveTrip;

export const buttonConfirmNextSection = customWidgets.buttonConfirmNextSection;
