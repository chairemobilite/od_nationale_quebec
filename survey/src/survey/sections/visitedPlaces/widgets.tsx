// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as odSurveyHelpers from 'evolution-common/lib/services/odSurvey/helpers';
import * as choices from '../../common/choices';
import * as conditionals from '../../common/conditionals';
import * as customConditionals from '../../common/customConditionals';
import * as customWidgets from './customWidgets';

export const activePersonTitle = customWidgets.activePersonTitle;

export const buttonSwitchPerson = customWidgets.buttonSwitchPerson;

export const personVisitedPlacesTitle = customWidgets.personVisitedPlacesTitle;

export const personVisitedPlacesMap = customWidgets.personVisitedPlacesMap;

export const personVisitedPlaces = customWidgets.personVisitedPlaces;

export const visitedPlaceActivityCategory = customWidgets.visitedPlaceActivityCategory;

export const visitedPlaceActivity = customWidgets.visitedPlaceActivity;

export const visitedPlaceOnTheRoadDepartureType = customWidgets.visitedPlaceOnTheRoadDepartureType;

export const visitedPlaceOnTheRoadArrivalType: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'onTheRoadArrivalType',
    twoColumns: false,
    containsHtml: false,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('visitedPlaces:onTheRoadArrivalType', {
            nickname,
            context: activePerson?.gender,
            count: countPersons
        });
    },
    choices: choices.onTheRoadArrivalTypeChoices,
    conditional: customConditionals.currentPlaceWorkOnTheRoadAndNoNextPlaceCustomConditional,
    validations: validations.requiredValidation
};

export const visitedPlaceAlreadyVisited: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'alreadyVisitedBySelfOrAnotherHouseholdMember',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const activePerson = odSurveyHelpers.getPerson({ interview, path });
        const nickname = activePerson?.nickname || t('survey:noNickname');
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('visitedPlaces:alreadyVisitedBySelfOrAnotherHouseholdMember', {
            nickname,
            count: countPersons
        });
    },
    choices: choices.yesNo,
    conditional: customConditionals.alreadyVisitedPlaceCustomConditional,
    validations: validations.requiredValidation
};

export const visitedPlaceShortcut = customWidgets.visitedPlaceShortcut;

export const visitedPlaceName = customWidgets.visitedPlaceName;

export const visitedPlaceGeography = customWidgets.visitedPlaceGeography;

export const visitedPlacePreviousPreviousDepartureTime = customWidgets.visitedPlacePreviousPreviousDepartureTime;

export const visitedPlacePreviousArrivalTime = customWidgets.visitedPlacePreviousArrivalTime;

export const visitedPlacePreviousDepartureTime = customWidgets.visitedPlacePreviousDepartureTime;

export const visitedPlaceArrivalTime = customWidgets.visitedPlaceArrivalTime;

export const visitedPlaceNextPlaceCategory = customWidgets.visitedPlaceNextPlaceCategory;

export const visitedPlaceDepartureTime = customWidgets.visitedPlaceDepartureTime;

export const buttonSaveVisitedPlace = customWidgets.buttonSaveVisitedPlace;

export const buttonCancelVisitedPlace = customWidgets.buttonCancelVisitedPlace;

export const buttonDeleteVisitedPlace = customWidgets.buttonDeleteVisitedPlace;

export const buttonVisitedPlacesConfirmNextSection = customWidgets.buttonVisitedPlacesConfirmNextSection;
