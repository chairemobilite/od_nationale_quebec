// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { TFunction } from 'i18next';
import * as defaultInputBase from 'evolution-frontend/lib/components/inputs/defaultInputBase';
import { defaultConditional } from 'evolution-common/lib/services/widgets/conditionals/defaultConditional';
import * as WidgetConfig from 'evolution-common/lib/services/questionnaire/types';
import * as validations from 'evolution-common/lib/services/widgets/validations/validations';
import * as odSurveyHelpers from 'evolution-common/lib/services/odSurvey/helpers';
import * as choices from '../../common/choices';
import * as conditionals from '../../common/conditionals';
import * as inputRange from '../../common/inputRange';
import * as customWidgets from './customWidgets';

export const householdMadeLongDistanceTripsInLastYear: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'household.madeLongDistanceTripsInLastYear',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('longDistance:household.madeLongDistanceTripsInLastYear', {
            count: countPersons
        });
    },
    choices: choices.yesNoDontKnow,
    conditional: defaultConditional,
    validations: validations.requiredValidation
};

export const householdLongDistanceIntroMap = customWidgets.householdLongDistanceIntroMap;

export const householdLongDistanceTripsSeptemberDecember: WidgetConfig.InputRangeType = {
    ...defaultInputBase.inputRangeBase,
    ...inputRange.sliderLongDistanceTripFrequency,
    path: 'household.longDistanceTripsSeptemberDecember',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('longDistance:household.longDistanceTripsSeptemberDecember', {
            count: countPersons
        });
    },
    conditional: conditionals.madeLongDistanceTripsConditional,
    validations: validations.requiredValidation
};

export const householdLongDistanceTripsJanuaryApril: WidgetConfig.InputRangeType = {
    ...defaultInputBase.inputRangeBase,
    ...inputRange.sliderLongDistanceTripFrequency,
    path: 'household.longDistanceTripsJanuaryApril',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('longDistance:household.longDistanceTripsJanuaryApril', {
            count: countPersons
        });
    },
    conditional: conditionals.madeLongDistanceTripsConditional,
    validations: validations.requiredValidation
};

export const householdLongDistanceTripsMayAugust: WidgetConfig.InputRangeType = {
    ...defaultInputBase.inputRangeBase,
    ...inputRange.sliderLongDistanceTripFrequency,
    path: 'household.longDistanceTripsMayAugust',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction, interview, path) => {
        const countPersons = odSurveyHelpers.countPersons({ interview });
        return t('longDistance:household.longDistanceTripsMayAugust', {
            count: countPersons
        });
    },
    conditional: conditionals.madeLongDistanceTripsConditional,
    validations: validations.requiredValidation
};

export const wouldLikeToParticipateToLongDistanceSurvey: WidgetConfig.InputRadioType = {
    ...defaultInputBase.inputRadioBase,
    path: 'household.wouldLikeToParticipateToLongDistanceSurvey',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('longDistance:household.wouldLikeToParticipateToLongDistanceSurvey'),
    choices: choices.yesNo,
    conditional: conditionals.madeLongDistanceTripsConditional,
    validations: validations.requiredValidation
};

export const wouldLikeToParticipateToLongDistanceSurveyContactEmail: WidgetConfig.InputStringType = {
    ...defaultInputBase.inputStringBase,
    path: 'household.wouldLikeToParticipateToLongDistanceSurveyContactEmail',
    twoColumns: false,
    containsHtml: true,
    label: (t: TFunction) => t('longDistance:household.wouldLikeToParticipateToLongDistanceSurveyContactEmail'),
    conditional: conditionals.wantToParticipateInLongDistanceSurveyConditional,
    validations: validations.emailValidation
};

export const buttonCompleteLongDistanceSection: WidgetConfig.ButtonWidgetConfig = {
    ...defaultInputBase.buttonNextBase,
    path: 'buttonCompleteLongDistanceSection',
    label: (t: TFunction) => t('longDistance:buttonCompleteLongDistanceSection')
};
