// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { checkConditionals } from 'evolution-common/lib/services/widgets/conditionals/checkConditionals';
import { type WidgetConditional } from 'evolution-common/lib/services/questionnaire/types';
import * as odSurveyHelpers from 'evolution-common/lib/services/odSurvey/helpers';

export const hasHouseholdSize1Conditional: WidgetConditional = (interview) => {
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: 'household.size',
                comparisonOperator: '===',
                value: 1
            }
        ]
    });
};

export const hasHouseholdSize2OrMoreConditional: WidgetConditional = (interview) => {
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: 'household.size',
                comparisonOperator: '>=',
                value: 2
            }
        ]
    });
};

export const hasOnePersonWithDisabilityOrHhSize1Conditional: WidgetConditional = (interview) => {
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: 'household.atLeastOnePersonWithDisability',
                comparisonOperator: '===',
                value: 'yes'
            },
            {
                logicalOperator: '||',
                path: 'household.size',
                comparisonOperator: '===',
                value: 1
            }
        ]
    });
};

export const hasHouseholdBicycleConditional: WidgetConditional = (interview) => {
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: 'household.bicycleNumber',
                comparisonOperator: '>=',
                value: 1
            }
        ]
    });
};

export const ifAge3to5Conditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 3
            },
            {
                logicalOperator: '&&',
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '<=',
                value: 5
            }
        ]
    });
};

export const ifAge4to13Conditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 4
            },
            {
                logicalOperator: '&&',
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '<=',
                value: 13
            }
        ]
    });
};

export const ifAge5OrLessConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '<=',
                value: 5
            }
        ]
    });
};

export const ifAge5orMoreConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 5
            }
        ]
    });
};

export const ifAge6OrMoreConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 6
            }
        ]
    });
};

export const ifAge11OrMoreConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 11
            }
        ]
    });
};

export const ifAge14orMoreConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 14
            }
        ]
    });
};

export const ifAge15OrLessConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '<=',
                value: 15
            },
            {
                logicalOperator: '&&',
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '!==',
                value: 'null'
            }
        ]
    });
};

export const ifAge15OrMoreConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 15
            }
        ]
    });
};

export const ifAge16OrMoreConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 16
            }
        ]
    });
};

export const ifAge16OrLessConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '<=',
                value: 16
            },
            {
                logicalOperator: '&&',
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '!==',
                value: 'null'
            }
        ]
    });
};

export const ifAge40OrMoreConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.age`,
                comparisonOperator: '>=',
                value: 40
            }
        ]
    });
};

export const hasDrivingLicenseConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.drivingLicenseOwner`,
                comparisonOperator: '===',
                value: 'yes'
            }
        ]
    });
};

export const isWorkerConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.occupation`,
                comparisonOperator: '===',
                value: 'fullTimeWorker'
            },
            {
                logicalOperator: '||',
                path: `household.persons.${currentPersonId}.occupation`,
                comparisonOperator: '===',
                value: 'partTimeWorker'
            },
            {
                logicalOperator: '||',
                path: `household.persons.${currentPersonId}.occupation`,
                comparisonOperator: '===',
                value: 'workerAndStudent'
            }
        ]
    });
};

export const isStudentConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.occupation`,
                comparisonOperator: '===',
                value: 'fullTimeStudent'
            },
            {
                logicalOperator: '||',
                path: `household.persons.${currentPersonId}.occupation`,
                comparisonOperator: '===',
                value: 'partTimeStudent'
            },
            {
                logicalOperator: '||',
                path: `household.persons.${currentPersonId}.occupation`,
                comparisonOperator: '===',
                value: 'workerAndStudent'
            }
        ]
    });
};

export const hasWorkingLocationConditional: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.workLocationType`,
                comparisonOperator: '===',
                value: 'onLocation'
            },
            {
                logicalOperator: '||',
                path: `household.persons.${currentPersonId}.workLocationType`,
                comparisonOperator: '===',
                value: 'hybrid'
            },
            {
                logicalOperator: '||',
                path: `household.persons.${currentPersonId}.workLocationType`,
                comparisonOperator: '===',
                value: 'onTheRoadWithUsualPlace'
            }
        ]
    });
};

export const acceptsToBeContactedForHelp: WidgetConditional = (interview) => {
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: 'acceptToBeContactedForHelp',
                comparisonOperator: '===',
                value: 'yes'
            }
        ]
    });
};

export const wantToParticipateInOtherSurveysChaireMobiliteConditional: WidgetConditional = (interview) => {
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: 'wouldLikeToParticipateInOtherSurveysChaireMobilite',
                comparisonOperator: '===',
                value: 'yes'
            }
        ]
    });
};

export const householdHasCars: WidgetConditional = (interview) => {
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: 'household.carNumber',
                comparisonOperator: '>=',
                value: 1
            }
        ]
    });
};

export const onTheRoadUsualWorkplace: WidgetConditional = (interview, path) => {
    const currentPersonId = odSurveyHelpers.getCurrentPersonId({ interview, path }); // Get the current person id
    return checkConditionals({
        interview,
        conditionals: [
            {
                path: `household.persons.${currentPersonId}.workLocationType`,
                comparisonOperator: '===',
                value: 'onTheRoadWithUsualPlace'
            }
        ]
    });
};
