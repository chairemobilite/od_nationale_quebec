// This file was automatically generated by the Evolution Generator.
// The Evolution Generator is used to automate the creation of consistent, reliable code.
// Any changes made to this file will be overwritten.

import { test } from '@playwright/test';
import * as testHelpers from 'evolution-frontend/tests/ui-testing/testHelpers';
import * as surveyTestHelpers from 'evolution-frontend/tests/ui-testing/surveyTestHelpers';
import { SurveyObjectDetector } from 'evolution-frontend/tests/ui-testing/SurveyObjectDetectors';

const context = {
    page: null as any,
    objectDetector: new SurveyObjectDetector(),
    title: '',
    widgetTestCounters: {}
};

// Configure the tests to run in serial mode (one after the other)
test.describe.configure({ mode: 'serial' });

// Initialize the test page and add it to the context
test.beforeAll(async ({ browser }) => {
    context.page = await testHelpers.initializeTestPage(browser, context.objectDetector);
});

/********** Start the survey **********/

// Start the survey with email
surveyTestHelpers.startAndLoginWithEmail({
    context,
    title: '?',
    email: `test${Math.random().toString(36).substring(2, 15)}@test.com`,
    nextPageUrl: '?'
});
// Start the survey without email
surveyTestHelpers.startAndLoginAnonymously({ context, title: '?', hasUser: false });

/********** Tests home section **********/

// Progress bar test for home section
testHelpers.sectionProgressBarTest({ context, sectionName: 'home', completionPercentage: 0 });

/* Test string widget accessCode */
testHelpers.inputStringTest({ context, path: 'accessCode', value: '?' });

/* Test radio widget acceptToBeContactedForHelp witch choices yesNo */
testHelpers.inputRadioTest({ context, path: 'acceptToBeContactedForHelp', value: '?' });

/* Test infotext widget contactInformationIntro with conditional acceptsToBeContactedForHelp */
testHelpers.inputVisibleTest({ context, path: 'contactInformationIntro', isVisible: true });
testHelpers.waitTextVisible({ context, text: '?' });

/* Test string widget contactEmail with conditional acceptsToBeContactedForHelp */
testHelpers.inputVisibleTest({ context, path: 'contactEmail', isVisible: true });
testHelpers.inputStringTest({ context, path: 'contactEmail', value: '?' });

/* Test string widget phoneNumber with conditional acceptsToBeContactedForHelp */
testHelpers.inputVisibleTest({ context, path: 'phoneNumber', isVisible: true });
testHelpers.inputStringTest({ context, path: 'phoneNumber', value: '?' });

/* Test string widget home_address */
testHelpers.inputStringTest({ context, path: 'home.address', value: '?' });

/* Test string widget home_city */
testHelpers.inputStringTest({ context, path: 'home.city', value: '?' });

/* Test string widget home_region with conditional hiddenWithQuebecAsDefaultValueCustomConditional */
testHelpers.inputVisibleTest({ context, path: 'home.region', isVisible: true });
testHelpers.inputStringTest({ context, path: 'home.region', value: '?' });

/* Test string widget home_country with conditional hiddenWithCanadaAsDefaultValueCustomConditional */
testHelpers.inputVisibleTest({ context, path: 'home.country', isVisible: true });
testHelpers.inputStringTest({ context, path: 'home.country', value: '?' });

/* Test string widget home_postalCode */
testHelpers.inputStringTest({ context, path: 'home.postalCode', value: '?' });

/* Test custom widget home_geography */
// Implement custom test

/* Test radionumber widget household_size */

/* Test radionumber widget household_carNumber */

/* Test radionumber widget household_bicycleNumber */

/* Test radionumber widget household_electricBicycleNumber */

/* Test radio widget household_atLeastOnePersonWithDisability with conditional hasHouseholdSize2OrMoreConditional witch choices yesNoPreferNotAnswer */
testHelpers.inputVisibleTest({ context, path: 'household.atLeastOnePersonWithDisability', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.atLeastOnePersonWithDisability', value: '?' });

/* Test nextbutton widget home_save */
testHelpers.inputNextButtonTest({ context, text: '?', nextPageUrl: '?' });

/********** Tests household section **********/

// Progress bar test for household section
testHelpers.sectionProgressBarTest({ context, sectionName: 'household', completionPercentage: 0 });

/* Test custom widget householdMembers */
// Implement custom test

/* Test string widget personNickname with conditional hasHouseholdSize2OrMoreConditional */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.nickname', isVisible: true });
testHelpers.inputStringTest({ context, path: 'household.persons.${personId[0]}.nickname', value: '?' });

/* Test number widget personAge */
testHelpers.inputStringTest({ context, path: 'household.persons.${personId[0]}.age', value: '?' });

/* Test radio widget personGender with conditional ifAge5orMoreConditional witch choices gender */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.gender', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.gender', value: '?' });

/* Test radio widget personWorkerType with conditional ifAge14orMoreConditional witch choices participationStatus */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.workerType', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.workerType', value: '?' });

/* Test radio widget personStudentType with conditional ifAge16OrMoreConditional witch choices participationStatus */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.studentType', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.studentType', value: '?' });

/* Test radio widget personSchoolType with conditional ifAge15OrLessConditional witch choices schoolType */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.schoolType', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.schoolType', value: '?' });

/* Test radio widget personOccupation with conditional personOccupationCustomConditional witch choices personOccupation */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.occupation', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.occupation', value: '?' });

/* Test radio widget personDrivingLicenseOwner with conditional ifAge16OrMoreConditional witch choices yesNoDontKnow */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.drivingLicenseOwner', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.drivingLicenseOwner', value: '?' });

/* Test radio widget personCarSharingMember with conditional hasDrivingLicenseConditional witch choices yesNoDontKnow */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.carSharingMember', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.carSharingMember', value: '?' });

/* Test checkbox widget personTransitFares with conditional ifAge6OrMoreConditional witch choices transitFareType */
// Widget not active

/* Test radio widget personHasDisability with conditional hasOnePersonWithDisabilityOrHhSize1Conditional witch choices yesNoPreferNotAnswer */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.hasDisability', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.hasDisability', value: '?' });

/* Test radio widget personWorkLocationType with conditional isWorkerConditional witch choices workLocationType */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.workLocationType', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.workLocationType', value: '?' });

/* Test radio widget personSchoolLocationType with conditional isStudentConditional witch choices studyLocationType */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.schoolLocationType', isVisible: true });
testHelpers.inputRadioTest({ context, path: 'household.persons.${personId[0]}.schoolLocationType', value: '?' });

/* Test string widget personUsualWorkPlaceName with conditional hasWorkingLocationConditional */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.usualWorkPlace.name', isVisible: true });
testHelpers.inputStringTest({ context, path: 'household.persons.${personId[0]}.usualWorkPlace.name', value: '?' });

/* Test custom widget personUsualWorkPlaceGeography with conditional hasWorkingLocationConditional */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.usualWorkPlace.geography', isVisible: true });
// Implement custom test

/* Test string widget personUsualSchoolPlaceName with conditional personUsualSchoolPlaceNameCustomConditional */
testHelpers.inputVisibleTest({ context, path: 'household.persons.${personId[0]}.usualSchoolPlace.name', isVisible: true });
testHelpers.inputStringTest({ context, path: 'household.persons.${personId[0]}.usualSchoolPlace.name', value: '?' });

/* Test custom widget personUsualSchoolPlaceGeography */
// Implement custom test

/* Test checkbox widget personTravelToWorkDays witch choices yesNoDontKnow */
// Widget not active

/* Test checkbox widget personRemoteWorkDays witch choices yesNoDontKnow */
// Widget not active

/* Test checkbox widget personTravelToStudyDays witch choices yesNoDontKnow */
// Widget not active

/* Test checkbox widget personRemoteStudyDays witch choices yesNoDontKnow */
// Widget not active

/* Test nextbutton widget household_save */
testHelpers.inputNextButtonTest({ context, text: '?', nextPageUrl: '?' });

/********** Tests end section **********/

// Progress bar test for end section
testHelpers.sectionProgressBarTest({ context, sectionName: 'end', completionPercentage: 0 });

/* Test radio widget householdOwnership witch choices householdOwnershipChoices */
testHelpers.inputRadioTest({ context, path: 'household.ownership', value: '?' });

/* Test select widget householdIncome witch choices householdIncomeChoices */

/* Test radio widget wouldLikeToParticipateInOtherSurveysChaireMobilite witch choices yesNo */
testHelpers.inputRadioTest({ context, path: 'wouldLikeToParticipateInOtherSurveysChaireMobilite', value: '?' });

/* Test string widget wouldLikeToParticipateInOtherSurveysChaireMobiliteContactEmail with conditional wantToParticipateInOtherSurveysChaireMobiliteConditional */
testHelpers.inputVisibleTest({ context, path: 'wouldLikeToParticipateInOtherSurveysChaireMobiliteContactEmail', isVisible: true });
testHelpers.inputStringTest({ context, path: 'wouldLikeToParticipateInOtherSurveysChaireMobiliteContactEmail', value: '?' });

/* Test text widget householdCommentsOnSurvey */
testHelpers.inputStringTest({ context, path: 'commentsOnSurvey', value: '?' });

/* Test infotext widget optionalIntroText */
testHelpers.waitTextVisible({ context, text: '?' });

/* Test nextbutton widget buttonCompleteInterviewWithCompleteSectionNoOptional */
testHelpers.inputNextButtonTest({ context, text: '?', nextPageUrl: '?' });

/* Test radionumber widget householdHybridCarNumber with conditional householdHasCars */
testHelpers.inputVisibleTest({ context, path: 'household.hybridCarNumber', isVisible: true });

/* Test radionumber widget householdElectricCarNumber with conditional householdHasCars */
testHelpers.inputVisibleTest({ context, path: 'household.electricCarNumber', isVisible: true });

/* Test range widget endDurationOfTheSurvey */
testHelpers.inputRangeTest({ context, path: 'durationOfSurvey', value: 0, sliderColor: '?' });

/* Test number widget endTimeSpentAnswering */
testHelpers.inputStringTest({ context, path: 'timeSpentAnswering', value: '?' });

/* Test range widget endInterestOfTheSurvey */
testHelpers.inputRangeTest({ context, path: 'interestOfTheSurvey', value: 0, sliderColor: '?' });

/* Test range widget endDifficultyOfTheSurvey */
testHelpers.inputRangeTest({ context, path: 'difficultyOfTheSurvey', value: 0, sliderColor: '?' });

/* Test range widget endBurdenOfTheSurvey */
testHelpers.inputRangeTest({ context, path: 'burdenOfTheSurvey', value: 0, sliderColor: '?' });

/* Test radio widget endConsideredAbandoningSurvey witch choices yesNoDontKnow */
testHelpers.inputRadioTest({ context, path: 'consideredAbandoningSurvey', value: '?' });

/* Test nextbutton widget buttonCompleteInterviewWithCompleteSection */
testHelpers.inputNextButtonTest({ context, text: '?', nextPageUrl: '?' });

/********** Tests completed section **********/

// Progress bar test for completed section
testHelpers.sectionProgressBarTest({ context, sectionName: 'completed', completionPercentage: 0 });

/* Test infotext widget completedText */
testHelpers.waitTextVisible({ context, text: '?' });

